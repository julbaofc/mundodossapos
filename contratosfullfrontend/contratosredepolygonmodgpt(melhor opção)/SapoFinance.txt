// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./SapoCore.sol";

contract SapoFinance is SapoCore {
    address public registry;
    address public bankToken;

    constructor(address _owner) SapoCore(_owner) {}

    function setLinks(address _registry, address _bankToken) external onlyOwner {
        registry = _registry;
        bankToken = _bankToken;
    }

    // Check struct reordered for packing
    struct Check {
        address from;
        address to;
        address token;
        uint128 amount;
        uint64  expiry;
        uint8   flags;
        // ~ 20*3 + 16 + 8 +1 = 85 bytes -> 3 slots
    }
    mapping(bytes32 => Check) public checks;

    event CheckIssued(bytes32 indexed id, address indexed from, address indexed to, uint128 amount, uint64 expiry, uint8 flags);

    function issueCheck(bytes32 id, address to, address token, uint128 amount, uint64 expiry, uint8 flags) external whenNotPaused {
        if (checks[id].from != address(0)) revert ErrExists();
        checks[id] = Check(msg.sender, to, token, amount, expiry, flags);
        emit CheckIssued(id, msg.sender, to, amount, expiry, flags);
    }

    function cashCheck(bytes32 id) external nonReentrant whenNotPaused {
        Check memory c = checks[id];
        if (c.to != msg.sender) revert ErrAuth();
        if (c.expiry != 0 && block.timestamp > c.expiry) revert ErrNoOp();
        delete checks[id];
        _safeTransfer(c.token, c.to, c.amount);
    }
}
