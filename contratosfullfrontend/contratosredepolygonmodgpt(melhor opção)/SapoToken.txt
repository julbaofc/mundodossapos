// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./SapoCore.sol";

/**
 * SapoToken â€” basic ERC20-like (simplified) with cap; constructor kept minimal.
 * NOTE: Replace with your actual ERC20 if needed; here we keep it light for deploy.
 */
contract SapoToken is SapoCore {
    string public name;
    string public symbol;
    uint8  public immutable decimals = 18;
    uint256 public cap;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(address _owner, string memory _name, string memory _symbol, uint256 _cap)
        SapoCore(_owner)
    {
        name = _name;
        symbol = _symbol;
        cap = _cap;
    }

    function approve(address spender, uint256 value) external whenNotPaused returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transfer(address to, uint256 value) external whenNotPaused returns (bool) {
        _transfer(msg.sender, to, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) external whenNotPaused returns (bool) {
        uint256 a = allowance[from][msg.sender];
        if (a < value) revert ErrNoOp();
        unchecked { allowance[from][msg.sender] = a - value; }
        _transfer(from, to, value);
        return true;
    }

    function _transfer(address from, address to, uint256 value) internal {
        if (to == address(0)) revert ErrZero();
        uint256 b = balanceOf[from];
        if (b < value) revert ErrNoOp();
        unchecked {
            balanceOf[from] = b - value;
            balanceOf[to] += value;
        }
        emit Transfer(from, to, value);
    }

    function mint(address to, uint256 value) external onlyOwner whenNotPaused {
        if (to == address(0)) revert ErrZero();
        uint256 newSupply = totalSupply + value;
        if (newSupply > cap) revert ErrOverflow();
        totalSupply = newSupply;
        balanceOf[to] += value;
        emit Transfer(address(0), to, value);
    }
}
